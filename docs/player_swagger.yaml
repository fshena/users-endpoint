openapi: 3.0.0

info:
  title: Players Endpoint
  version: 1.0.0
  description: API endpoint for the Players

servers:
- url: 'http://api.localleague.local:3000'
  description: Local development server
- url: 'http://api.localleague.local:3000'
  description: Production server

security:
- BearerAuth: []

paths:
  /players:
    get:
      tags:
      - Players
      summary: Get Players list
      description: Get a paginated list of Players
      operationId: getPlayers
      parameters:
      - in: query
        name: limit
        schema:
          type: integer
          default: 100
          maximum: 100
        required: false
        description: The number of results returned in the response
      - in: query
        name: fields
        schema:
          type: string
          enum:
          - id
          - firstName
          - lastName
          - email
          - password
          - avatar
          - roleId
          - username
          - birthday
          - height
          - weight
          - isActive
        required: false
        description: A comma separated list of the player's fields to be returned in the response
      - in: query
        name: order
        schema:
          type: string
          default: asc
          enum:
          - asc
          - desc
        required: false
        description: The order of the returned results
      - in: query
        name: sort
        schema:
          type: string
          default: id
          enum:
          - id
          - firstName
          - lastName
          - email
          - roleId
          - username
          - birthday
          - height
          - weight
          - isActive
        required: false
        description: Sort results by specific player field
      responses:
        '200':
          description: A full list of Players
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Rate:
              $ref: '#/components/headers/X-RateLimit-Rate'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            Link:
              $ref: '#/components/headers/Link'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'
        '400':
          $ref: '#/components/responses/BAD_REQUEST'
        '401':
          $ref: '#/components/responses/UNAUTHORIZED'
        '403':
          $ref: '#/components/responses/FORBIDDEN'
    post:
      tags:
        - Players
      summary: Create player
      description: Create a new player
      operationId: postPlayers
      requestBody:
        description: An object containing the player's data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Player'
      responses:
        '201':
          description: player succesfully created
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Rate:
              $ref: '#/components/headers/X-RateLimit-Rate'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            Content-Location:
              $ref: '#/components/headers/Content-Location'
        '400':
          $ref: '#/components/responses/BAD_REQUEST'
        '401':
          $ref: '#/components/responses/UNAUTHORIZED'
        '403':
          $ref: '#/components/responses/FORBIDDEN'
        '422':
          $ref: '#/components/responses/UNPROCESSABLE_ENTITY'
  /players/{playerId}:
    get:
      tags:
        - Players
      summary: Get a specific player
      description: Get data for a specific player
      operationId: getPlayersById
      parameters:
      - in: path
        name: playerId
        required: true
        schema:
          type: number
        description: player ID
      - in: query
        name: fields
        schema:
          type: string
          enum:
          - id
          - firstName
          - lastName
          - email
          - password
          - avatar
          - roleId
          - username
          - birthday
          - height
          - weight
          - isActive
        required: false
        description: A comma separated list of the player's fields to be returned in the response
      responses:
        '200':
          description: A player object
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Rate:
              $ref: '#/components/headers/X-RateLimit-Rate'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '400':
          $ref: '#/components/responses/BAD_REQUEST'
        '401':
          $ref: '#/components/responses/UNAUTHORIZED'
        '403':
          $ref: '#/components/responses/FORBIDDEN'
        '404':
          $ref: '#/components/responses/NOT_FOUND'
    put:
      tags:
        - Players
      summary: Update player
      description: Replace existing player's data
      operationId: putplayer
      parameters:
      - in: path
        name: playerId
        required: true
        schema:
          type: number
        description: player ID
      requestBody:
        description: An object containing the new player data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Player'
      responses:
        '204':
          description: player successfully updated
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Rate:
              $ref: '#/components/headers/X-RateLimit-Rate'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
        '400':
          $ref: '#/components/responses/BAD_REQUEST'
        '401':
          $ref: '#/components/responses/UNAUTHORIZED'
        '403':
          $ref: '#/components/responses/FORBIDDEN'
        '404':
          $ref: '#/components/responses/NOT_FOUND'
        '422':
          $ref: '#/components/responses/UNPROCESSABLE_ENTITY'
    delete:
      tags:
        - Players
      summary: Delete player
      description: Delete existing player
      operationId: deleteplayer
      parameters:
      - in: path
        name: playerId
        required: true
        schema:
          type: number
        description: player ID
      responses:
        '204':
          description: player successfully deleted
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Rate:
              $ref: '#/components/headers/X-RateLimit-Rate'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
        '400':
          $ref: '#/components/responses/BAD_REQUEST'
        '401':
          $ref: '#/components/responses/UNAUTHORIZED'
        '403':
          $ref: '#/components/responses/FORBIDDEN'
        '404':
          $ref: '#/components/responses/NOT_FOUND'
        '422':
          $ref: '#/components/responses/UNPROCESSABLE_ENTITY'

components:
  schemas:
    Player:
      type: object
      properties:
        id:
          type: integer
          description: The player's identifier
          example: 123
        firstName:
          type: string
          pattern: '^[a-zA-Z]+$'
          minLength: 3
          maxLength: 100
          description: The player's name.
          example: 'Eden'
        lastName:
          type: string
          pattern: '^[a-zA-Z]+$'
          minLength: 3
          maxLength: 100
          description: The player's surname.
          example: 'Hazard'
        email:
          type: string
          format: email
          description: The player's email address.
          example: alan.turing@gmail.com
        password:
          type: string
          description: Encrypted player password.
          example: '4sdf4sfs@#$@'
        avatar:
          type: string
          format: uri
          description: The link to the player's avatar.
          example: 'https://s3.amazonaws.com/128.jpg'
        roleId:
          type: integer
          description: The id of the role assigned to the player.
          example: 24
        username:
          type: string
          pattern: '^[a-zA-Z0-9-_]+$'
          minLength: 3
          maxLength: 100
          description: The player's username.
          example: 'Eden_Hazard'
        birthday:
          type: string
          format: datetime
          description: The player's date of birth.
          example: 'Thu Mar 12 1987 02:00:00 GMT+0200 (Eastern European Standard Time)'
        weight:
          type: integer
          format: numeric
          maxLength: 300
          description: The player's weight in Kg.
          example: 70
        height:
          type: integer
          format: numeric
          maxLength: 300
          description: The player's height of Cm.
          example: 180
        isActive:
          type: boolean
          description: A flag defining if the user is activated or not.
          example: false
      required:
        - username
        - birthday
        - height
        - weight

  headers:
    X-RateLimit-Limit:
      schema:
        type: integer
      description: Request limit per specific hour
    X-RateLimit-Rate:
      schema:
        type: number
      description: Rate of the requests
    X-RateLimit-Remaining:
      schema:
        type: integer
      description: Remaining request of the 'Limit'
    Content-Location:
      schema:
        type: string
      description: The link to the newly created player
    Link:
      schema:
        type: string
      description: 'A link for the next, previous, last and first results set'

  responses:
    UNAUTHORIZED:
      description: Not a valid access token
    UNPROCESSABLE_ENTITY:
      description: Not a valid player object
    BAD_REQUEST:
      description: The request is not valid
    NOT_FOUND:
      description: player was not found
    FORBIDDEN:
      description: Not allowed to access entity
    JWT:
      description: An object containing a valid JWT

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

tags:
- name: Players
  description: Everything about a player
  externalDocs:
    url: http://docs.my-api.com/pet-operations.htm
